*dn-md-utils.txt*	Auxiliary filetype plugin for the markdown language
David Nebauer                                                    *dn-md-utils*

==============================================================================
CONTENTS                                                *dn-md-utils-contents*
  1. Introduction..........................................|dn-md-utils-intro|
  2. Configuration........................................|dn-md-utils-config|
  3. Features...........................................|dn-md-utils-features|
  4. Commands...........................................|dn-md-utils-commands|
  5. Mappings...........................................|dn-md-utils-mappings|
  6. Autocommands.......................................|dn-md-utils-autocmds|
  7. Functions.........................................|dn-md-utils-functions|
  8. Help...................................................|dn-md-utils-help|

==============================================================================
INTRODUCTION                                               *dn-md-utils-intro*

An auxiliary filetype plugin for the markdown language.

Previously the plugin author used a personal plugin to provide markdown-
related functionality. That plugin was retired when the plugin author switched
to the |vim-pandoc| plugin and panzer framework
(https://github.com/msprev/panzer) for markdown support. The dn-md-utils
ftplugin is intended to address any gaps in markdown support provided by those
tools.

DEPENDENCIES

Pandoc is used to generate output. It is not provided by the dn-md-utils
ftplugin, which depends on the |vim-pandoc| plugin and assumes panzer
(https://github.com/msprev/panzer) is installed and configured.

The dn-md-utils ftplugin is designed for use with pandoc version 2.0. At the
time of writing this is the development branch of pandoc, while the production
version is 1.19. As the change in major version number suggests, the
interfaces of these two versions of pandoc are incompatible. Hence, the
dn-md-utils ftplugin will not work with the current production version of
pandoc. There are two known incompatibilities between these versions that
affect the dn-md-utils ftplugin. The first is that the "smart" feature has
changed from an option ("--smart") to an extension ("--from=markdown+smart").
The second is a change in the option used to specify the latex engine from
"--latex-engine" to "--pdf-engine".

The dn-md-utils ftplugin also depends on the vim-dn-utils plugin
(https://github.com/dnebauer/vim-dn-utils).

==============================================================================
CONFIGURATION                                             *dn-md-utils-config*

                                                       *b:disable_dn_md_utils*
Prevents the dn-md-utils ftplugin loading if set to a true value before it
would normally load.

                                                        *b:dn_md_no_autoclean*
Prevents automatic deletion ("cleaning") of output artefacts when a buffer is
deleted or vim exits. For more information see |dn#md#cleanBuffer()|,
|dn#md#cleanAllBuffers()|, and |dn-md-utils-autocmds|.

                                                          *g:no_markdown_maps*
Prevents loading of plugin mappings if set to a true value. (See also
discussion of "g:no_plugin_maps" in |dn-md-utils-mappings|.)

                                                                *g:no_md_maps*
Prevents loading of plugin mappings if set to a true value. (See also
discussion of "g:no_plugin_maps" in |dn-md-utils-mappings|.)

==============================================================================
FEATURES                                                *dn-md-utils-features*

The major features of the dn-md-utils ftplugin are support for yaml metadata
blocks, adding figures, cleaning up output file and directories, and altering
the pandoc command line arguments.

METADATA

Pandoc-flavoured markdown uses a yaml-style metadata block at the top of the
file to specify values used by pandoc for document processing. With panzer
(https://github.com/msprev/panzer) installed the metadata block can also
specify panzer-related values which, in turn, specify values used by pandoc
for document processing.

The dn-md-utils ftplugin assumes the following default yaml-metadata block is
used at the top of documents:
>
    ---
    title:  "[][source]"
    author: "[][author]"
    date:   ""
    style:  [Standard, Latex14pt]
            # Latex8-12|14|17|20pt; PaginateSections; IncludeFiles
    ---
<
The reference-style links are defined at the end of the document. The default
boilerplate for this is:
>
    [comment]: # (URLs)

       [author]:

       [source]:
<
The default metadata block and reference link definitions are added to a
document by the function |dn#md#addBoilerplate()|, which can be called using
the command |:MUAddBoilerplate| and mapping "<Leader>ab" (see
|dn-md-utils-mappings|).

Previously created markdown files have yaml metadata blocks that do not use
panzer. Those metadata blocks can be "panzerified" using the
|dn#md#panzerifyMetadata()| function, which can be called using the command
|:MUPanzerifyMetadata| and mapping "<Leader>pm" (see |dn-md-utils-mappings|).

IMAGES

A helper function, mapping and command are provided to assist with adding
figures. They assume the images are defined using reference links with
optional attributes, and that all reference links are added to the end of the
document prefixed with three spaces. For example:
>
    See @fig:display and {@fig:packed}.

    ![Tuck boxes displayed][display]

    ![Tuck boxes packed away][packed]

    [comment]: # (URLs)

       [display]: resources/displayed.png "Tuck boxes displayed"
       {#fig:display .class width="50%"}

       [packed]: resources/packed.png "Tuck boxes packed away"
       {#fig:packed .class width="50%"}
<
A figure is inserted on the following line using the |dn#md#insertFigure()|
function, which can be called using the command |:MUInsertFigure| and mapping
"<Leader>fig" (see |dn-md-utils-mappings|).

OUTPUT

The dn-md-utils ftplugin leaves the bulk of output generation to |vim-pandoc|,
but does generate mobi output since pandoc, and hence |vim-pandoc|, does not
handle mobi format (see |dn#md#generateMobi()| and |:Mobify|).

The dn-md-utils ftplugin does provide a mapping, command and function for
deleting output files and temporary output directories. The term "clean" is
used, as in the makefile keyword that deletes all working and output files.

Cleaning of output only occurs if the current buffer contains a file. The
directory searched for items to delete is the directory in which the file in
the current buffer is located.

If the file being edited is FILE.ext, the files that will be deleted have
names like "FILE.html" and "FILE.pdf" (see |dn#md#cleanBuffer()| for a
complete list). The temporary output subdirectory ".tmp" will also be
recursively force deleted. Warning: the dn-md-utils ftplugin does not check
that it is safe to delete files and directories identified for deletion. For
example, it does not check whether any of them are symlinks to other
locations. Also be aware that directories are forcibly and recursively
deleted, as with the *nix shell command "rm -fr".

When a markdown buffer is closed (actually when the |BufDelete| event occurs),
the dn-md-utils ftplugin checks for output files/directories and, if any are
found, asks the user whether to delete them. If the user confirms deletion
they are removed. When vim exits (actually, when the |VimLeavePre| event
occurs) the dn-md-utils ftplugin looks for any markdown buffers and looks in
their respective directories for output files/directories and, if any are
found, asks the user whether to delete them. See |dn-md-utils-autocmds| for
further details.

Output files and directories associated with the current buffer can be deleted
at any time by using the |dn#md#cleanBuffer()| function, which can be called
using the command |:MUCleanOutput| and mapping "<Leader>co" (see
|dn-md-utils-mappings|).

ALTERING PANDOC COMPILER ARGUMENTS

The |vim-pandoc| plugin provides the |String| variable
|g:pandoc#compiler#arguments| for users to configure. Any arguments it
contains are automatically passed to pandoc when the |:Pandoc| command is
invoked. The dn-md-utils ftplugin enables the user to make changes to the
arguments configured by this variable. The parser used by dn-md-utils is very
simple, so all arguments in the value for |g:pandoc#compiler#arguments| must
be separated by one or more spaces and have one of the following forms:
  * --arg-with-no-value
  * --arg="value"

The number of leading dashes can be from one to three.

To add an argument and value such as "-Vlang:spanish", treat it as though it
were an argument such as "--arg-with-no-value".

This is only one method of specifying compiler arguments. For example, another
method is using the document yaml metadata block. If highlight style is
specified by multiple methods, the method that "wins" may depend on a number
of factors. Trial and error may be necessary to determine how different
methods of setting compiler arguments interact on a particular system.

The dn-md-utils ftplugin provides commands for adding and/or changing the
following pandoc command line argument:

--highlight-style
  * see |:MUChangeHighlightStyle|
  * user selects from available highlight styles
  * advises user of current value if already set

==============================================================================
COMMANDS                                                *dn-md-utils-commands*

:[N]Mobify                                                           *:Mobify*
  Calls |dn#md#generateMobi()| to create a mobi output file from a previously
  output epub file.

:[N]MUAddBoilerplate                                       *:MUAddBoilerplate*
  Calls |dn#md#addBoilerplate()| to add a metadata header template, including
  title, author, date, and (panzer) styles, and a footer template for url
  reference links.

:[N]MUChangeHighlightStyle                           *:MUChangeHighlightStyle*
  Calls |dn#md#changeHighlightStyle()| to add, or change, the highlight style
  setting in |g:pandoc#compiler#arguments|.

:[N]MUCleanOutput                                             *:MUCleanOutput*
  Calls |dn#md#cleanBuffer()| to delete output files and temporary output
  directories. The user is not asked for confirmation before deletion.

:[N]MUInsertFigure                                           *:MUInsertFigure*
  Calls |dn#md#insertFigure()| to insert a figure on the following line.

:[N]MUPanzerifyMetadata                                 *:MUPanzerifyMetadata*
  Calls |dn#md#panzerifyMetadata()| to add a line to the document's metadata
  block for panzer styles.

==============================================================================
MAPPINGS                                                *dn-md-utils-mappings*

The following mappings are provided for both |Insert-mode| and |Normal-mode|:

<Leader>ab
  * add markdown boilerplate
  * calls |dn#md#addBoilerplate()|

<Leader>co
  * clean output files and temporary directories
  * calls |dn#md#cleanBuffer()|

<Leader>fig
  * insert figure on the following line
  * calls |dn#md#insertFigure()|

<Leader>hl
  * user selects a code block highlight language to insert at the cursor
    location
  * calls |dn#md#insertHighlightLanguage()|

<Leader>pm
  * convert yaml metadata block to use panzer
  * calls |dn#md#panzerifyMetadata()|

dn-md-utils adheres to the convention that plugin mappings are not loaded if
any of the variables "g:no_plugin_maps", |g:no_md_maps| or
|g:no_markdown_maps| are set to a true value.

==============================================================================
AUTOCOMMANDS                                            *dn-md-utils-autocmds*

This plugin is configured to automatically clean output files and directories
associated with the current buffer when it is deleted (provided it is of
markdown file type), and to automatically clean output files and directories
associated with all markdown file buffers when vim exits. In all case the user
is asked for confirmation before any files or directories are deleted.

For more information on automatic cleaning see |dn#md#cleanBuffer()|.

The autocmds responsible for this behaviour can be found in the "dn_markdown"
autocmd group (see |autocmd-groups|) and can be viewed (see |autocmd-list|).

Automatic cleaning on buffer and vim exit can be configured with
|b:dn_md_no_autoclean|.

==============================================================================
FUNCTIONS                                              *dn-md-utils-functions*

dn#md#addBoilerplate([insert])                        *dn#md#addBoilerplate()*
  Adds panzer/markdown boilerplate to the top and bottom of the document.

  The [insert] boolean argument determines whether or not the function was
  entered from insert mode.
  [insert] is false if omitted.

dn#md#changeHighlightStyle()                    *dn#md#changeHighlightStyle()*
  Change the existing pandoc highlight style, as set by the pandoc option
  "--highlight-style". The user is informed of the existing highlight style
  and then given the option to select from a list of available highlight
  styles. The highlight style setting is added to the |vim-pandoc| module
  variable |g:pandoc#compiler#arguments|; if the highlight style is already
  defined in the |g:pandoc#compiler#arguments| variable, the variable value is
  adjusted to reflect the new style.

  The parser used for the variable |g:pandoc#compiler#arguments| is simple and
  there are limitations to the syntax that can be used for
  |g:pandoc#compiler#arguments|. For more details on the formatting of this
  variable, and the limitations of this method of specifying pandoc compiler
  arguments, see subsection "ALTERING PANDOC COMPILER ARGUMENTS" in
  |dn-md-utils-features|.
  Throws ERROR(BadParse) if unable to parse g:pandoc#compiler#arguments
  Throws ERROR(NoStyles) if unable to get available highlight styles

dn#md#cleanAllBuffers([arg])                         *dn#md#cleanAllBuffers()*
  Deletes common output artefacts: output files with extensions like "html"
  and "pdf", and temporary directories like ".tmp". (See |dn#md#cleanBuffer()|
  for a complete list.)

  Searches sequentially through all buffers that are both associated with a
  file name and have a markdown file type. When output artefacts are located
  the user is asked for confirmation before deletion.

  Optional [arg] is a |Dictionary| with a number of valid keys, all of which
  are themselves optional:

  key "confirm" (bool)
    * whether, if output artefacts are detected, to ask user for confirmation
      before anything is deleted

  key "insert" (bool)
    * whether or not the function was entered from insert mode

  key "pause_end" (bool)
    * whether to pause after action taken; will not pause if no actions taken
      and no feedback provided

  key "say_none" (bool)
    * whether to display a message if no output artefacts are detected

  [arg] is {'confirm': false, 'insert': false, 'pause_end': false,
  'say_none': false} if omitted.

  Throws ERROR(ArgCount) if wrong number of arguments
  Throws ERROR(DelFail) if fail to delete output files/directories
  Throws ERROR(InvalidKey) if Dict contains an invalid key
  Throws ERROR(NoBuffer) if no buffer has specified buffer number
  Throws ERROR(NoFile) if specified buffer has no associated file
  Throws ERROR(NonBoolVal) if non-boolean value assigned to boolean key
  Throws ERROR(NonDictArg) if expected Dict arg and got non-Dict
  Throws ERROR(NonMDBuffer) if specified buffer does not have a markdown
  filetype
  Throws ERROR(WrongBufNrType) if buffer number value is not a number

dn#md#cleanBuffer([arg])                                 *dn#md#cleanBuffer()*
  Deletes common output artefacts: output files with extensions "htm", "html",
  "pdf", "epub", and "mobi"; and temporary directories names ".tmp".

  Optional [arg] is a |Dictionary| with a number of valid keys, all of which
  are themselves optional:

  key "bufnr" (number)
    * buffer number to process for output

  key "confirm" (bool)
    * whether, if output artefacts are detected, to ask user for confirmation
      before anything is deleted

  key "insert" (bool)
    * whether or not the function was entered from insert mode

  key "pause_end" (bool)
    * whether to pause after action taken; will not pause if no actions taken
      and no feedback provided

  key "say_none" (bool)
    * whether to display a message if no output artefacts are detected

  [arg] is {'bufnr': 0, 'confirm': false, 'insert': false, 'pause_end': false,
  'say_none': false} if omitted.

  Throws ERROR(ArgCount) if wrong number of arguments
  Throws ERROR(DelFail) if fail to delete output files/directories
  Throws ERROR(InvalidKey) if Dict contains an invalid key
  Throws ERROR(NoBuffer) if no buffer has specified buffer number
  Throws ERROR(NoFile) if specified buffer has no associated file
  Throws ERROR(NonBoolVal) if non-boolean value assigned to boolean key
  Throws ERROR(NonDictArg) if expected Dict arg and got non-Dict
  Throws ERROR(NonMDBuffer) if specified buffer does not have a markdown
  filetype
  Throws ERROR(WrongBufNrType) if buffer number value is not a number

dn#md#generateMobi([insert])                            *dn#md#generateMobi()*
  Generates a mobi output file from an existing epub output file.

  The [insert] boolean argument determines whether or not the function was
  entered from insert mode.
  [insert] is false if omitted.
  Throws ERROR(BadMeta) if metadata output is invalid
  Throws ERROR(ConversionFailed) if unable to convert epub file to mobi
  Throws ERROR(NoConverter) if cannot find ebook coverter executable
  Throws ERROR(NoEpub) if no epub output file available to convert
  Throws ERROR(NoMeta) if not able to extract epub metadata
  Throws ERROR(NoMobi) if no mobi file created during epub conversion

dn#md#insertFigure([insert])                            *dn#md#insertFigure()*
  Inserts a figure on a new line. A reference link definition is added to the
  of the file in its own line.

  The [insert] boolean argument determines whether or not the function was
  entered from insert mode.
  [insert] is false if omitted.

dn#md#insertHighlightLanguage([insert])      *dn#md#insertHighlightLanguage()*
  Select a code block highlight language which is inserted at the end of the
  current line.

  The [insert] boolean argument determines whether or not the function was
  entered from insert mode.
  [insert] is false if omitted.
  Throws ERROR(NoLangs) if unable to get highlight languages from pandoc
  Throws ERROR(BadLang) if user enters an invalid highlight language

dn#md#panzerifyMetadata([insert])                  *dn#md#panzerifyMetadata()*
  Adds a line to the initial metadata block, if present, for panzer styles.
  Intended for use when converting from plain pandoc to pandoc-plus-panzer.

  The [insert] boolean argument determines whether or not the function was
  entered from insert mode.
  [insert] is false if omitted.
  Throws ERROR(NoBlockEnd) if can't find end of initial metadata block
  Throws ERROR(NoMetadata) if no initial metadata block

==============================================================================
HELP                                                        *dn-md-utils-help*

This ftplugin contributes to the |dn-utils| plugin's help system (see
|dn#util#help()| for details). In the help system navigate to: vim -> markdown
ftplugin.


vim:tw=78:ts=8:ft=help:norl:
